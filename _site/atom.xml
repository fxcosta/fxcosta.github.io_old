<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
    <title type="text" xml:lang="en">Felix Costa</title>
    <link type="application/atom+xml" rel="self" href="http://localhost:3000//atom.xml"/>
  
  <link href="http://localhost:3000//"/>
  <id>http://localhost:3000//</id>
  <updated>2016-08-15T23:18:57Z</updated>
  <author>
    <name>Felix Costa</name>
    <email>fx3costa@gmail.com</email>
  </author>
  <rights type="text">Copyright © 2016 Felix Costa. All rights reserved.</rights>
  
  <entry>
  <title type="text">Iniciando com TDD #1 - Minha motivação e primeiro contato</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000//iniciando-com-tdd-1-minha-motivacao-e-primeiro-contato.html" />
  <id>http://localhost:3000//iniciando-com-tdd-1-minha-motivacao-e-primeiro-contato</id>
  <published>2016-04-09T04:01:36Z</published>
  <updated>2016-04-09T04:01:36Z</updated>
  <content type="html"><![CDATA[ <p>E aí, pessoal!</p>
<p>Esse artigo foi escrito originalmente para o <a href="http://phpba.com.br/iniciando-com-tdd-1/">Blog PHP-BA</a>, então confere lá e aproveita que tem bastante conteúdo interessante. Valeu, galera da comunidade PHP-BA!</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Dual Boot (W8.1 + Mint) em um Acer Aspire E14</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000//dual-boot-w8-1-mint-em-um-acer-aspire-e14.html" />
  <id>http://localhost:3000//dual-boot-w8-1-mint-em-um-acer-aspire-e14</id>
  <published>2015-12-28T03:17:00Z</published>
  <updated>2015-12-28T03:17:00Z</updated>
  <content type="html"><![CDATA[ <p>Esse post é mais como uma dica porque encontrei algumas dificuldades para montar um ambiente com Windows 8.1 e Linux Mint 17.2.</p>
<p>Nunca tinha trabalhado com um notebook mais recente que já tivesse vindo com o W8 de fábrica e com UEFI, por isso, tive um certo trabalho para encontrar uma solução, uma vez que, se você chegou até aqui, sabe que é de fato trabalhoso, ainda mais quando não se está tão acostumado com um ambiente Linux.<!--more--></p>
<p>O motivo de ter um Dual Boot é simples: Linux para trabalhar (programar, pesquisar, etc) e Win32 para jogar. Simples. Por incrível que pareça, ficou mais fácil jogar algo, já que eu sempre ficava na promessa de testar um novo jogo.</p>
<p>Enfim, o modelo do notebook onde foi testado foi o Acer Aspire E14 (E5-471) com Windows 8.1 de fábrica. O método usado foi exatamente o mesmo que é encontrado em alguns artigos: primeiro dimensionar o HD para termos um espaço livre para nossa distro Linux, usar um LiveCD ou USB bootável, instalar a sua distro (que no meu caso foi o Mint 17.2) no espaço livre e... e aí, dependendo do seu notebook, como eu pude perceber, pode haver diversas situações.</p>
<p>A minha situação foi: não havia um GRUB no momento de boot do notebook. Ou seja, ou iniciava direto pra um sistema ou por outro. O que definia qual sistema seria iniciado era a opção de boot escolhida. Se fosse UEFI iniciava o Windows, se não fosse, iniciava direto no Mint.</p>
<p>A solução, a única que funcionou de todas as demais que testei, e que não foram poucas, foi a apresenta nesse vídeo:</p>
<p>http://www.youtube.com/watch?v=3QOfYC4LJRo</p>
<p>Que é basicamente desativar o UEFI, entrar no Linux, instalar e rodar um script chamado <a href="http://www.rodsbooks.com/refind/" target="_blank">rEFInd</a>, voltar a opção de boot para UEFI e pronto, no próximo boot teremos uma tela de escolha de qual sistema você deseja dar partida.</p>
<p>Sem mais delongas é isso, fica apenas como uma dica para quem tem esse problemas - e pude perceber que não são poucas - e, caso tenha dado certo ou dado errado comenta para descobrir se de fato é a melhor alternativa.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Por que devemos preferir composição ao invés de herança?</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000//por-que-devemos-preferir-composicao-ao-inves-de-heranca.html" />
  <id>http://localhost:3000//por-que-devemos-preferir-composicao-ao-inves-de-heranca</id>
  <published>2015-09-06T05:47:17Z</published>
  <updated>2015-09-06T05:47:17Z</updated>
  <content type="html"><![CDATA[ <p>Logo quando estamos começando nossa longa caminhada sobre os vales escuros da orientação a objetos - e digo escuro por que cada dia que passa se aprende mais - aprendemos o uso e importância da herança. Se você está lendo esse artigo suponho que ao menos já tenha visto uma situação onde você viu ou implementou herança.</p>
<p>Mas, será que minha classe realmente É-UM outra classe? Será que eu realmente tenho que adotar tais comportamentos e até mesmo sobrescreve-los? Será que a classe filha realmente precisa de todos esses métodos e não somente de um ou dois? Se a herança é ferramenta básica de extensão e reuso de funcionalidade por que seu uso é extremamente desencorajado? Bem, vamos começar por partes.<!--more--></p>
<p>Vamos ser diretos e listar os problemas da herança - levando em consideração que o leitor tenha noção da herança, seu objetivo e motivação. Primeiro ponto, inquestionável é: herança quebra o encapsulamento. Mas hein?</p>
<p>Para essa afirmação vamos usar um exemplo claro, sem códigos ainda: Temos uma super classe chamada Dispositivo. Atualmente há duas classes derivadas de Dispositivo chamadas DispositivoA e DispositivoB e, logicamente, ambas herdam todos os métodos de Dispositivo mas vamos pegar um para exemplo que é chamado de conectarEntrada que é responsável pela lógica de como os dipositivos são conectados. Em nossa abstração - e ingenuidade - definimos o corpo desse método em Dispositivo e nas classes derivadas apenas nos referenciamos a ele, afinal, é o mesmo comportamento, não é? Porém, requisitos mudam e agora passamos a ter um novo tipo de dispositivo, o DispositivoC onde seu modo de entrada será diferente. A primeira coisa que pensamos é: ok, irei sobrescrever o método conectarEntrada, fazendo apenas os ajustes necessários. Obviamente o que você precisa? Conhecer como a super classe implementa esse método, daí você abre a classe, observa o que tem e comete a quebra do encapsulamento. Acabou encapsulamento, você violou um dos pilares da OO. Você tem conhecimento especifico demais.</p>
<p>E isso fica pior quando DispositivoC não usa metade dos métodos de Dispositivo mas mesmo assim continuamos a trabalhar com a herança afinal alguns métodos ainda são aproveitáveis. Comodismo?</p>
<p>Resumindo, o encapsulamento entre Dispositivos e DispositivoA, B e C é fraco, e o acoplamento é forte. Assim, toda vez que Dispositivo for alterado todas as subclasses serão afetadas. A nossa estrutura está presa, acoplada, e não pode sofrer alterações graves. Mas requisitos mudam, e nossos clientes não estão nenhum pouco preocupados com isso.</p>
<p>E isso não é novidade, vide o artigo de Alan Snyder, <a href="http://citeseer.ist.psu.edu/513482.html">Encapsulation and Inheritance in Object-Oriented Programming Languages</a>, de 1986! Não convencido? Olha o que a <a href="https://en.wikipedia.org/wiki/Design_Patterns">Gang of Four</a> diz: "Porque herança expõe para uma subclasse detalhes da implementação do seu pai, por isso muitas vezes é dito que "herança é quebra de encapsulamento".</p>
<p>Beleza, então se você tá falando que esse lance de herança deve ser analisada com muito, mas muito cuidado, que solução usar? Joshua Bloch em seu livro Effective Java nos diz: prefira composição em vez de herança. Vamos ver isso melhor!</p>
<p>Quando utilizamos composição, instanciamos a classe que desejamos dentro de nosso código, ex: DispositivoC não herda mais de Dispositivo, ele não É-UM Dispositivo, ele TEM um Dispositivo. Dessa forma, estamos estendendo as responsabilidades pela delegação de trabalho a outros objetos, ou seja, DispositivoA tem um comportamento parecido com Dispositivo? Beleza, simplesmente use o comportamento de Dispositivo ao invés de ter essa responsabilidade em DispositivoA. Ou seja, é um modo mais geral de estender uma classe, onde um objeto, em vez de realizar uma de suas tarefas, delega tal tarefa a um objeto auxiliar associado, que no caso você usaria como classe pai.</p>
<p>Ao utilizar a composição, teremos muito mais flexibilidade, além de ser mais comum em muitos padrões de projetos. Dessa forma temos projeto mais flexível a mudanças, respeitando os princípios de responsabilidade única, substituição de Liskov e tornando nosso código desacoplado. Qualquer alteração feita em Dispositivo não quebrará nossos clientes diretamente e podemos usar somente métodos que sejam realmente necessários.</p>
<p>Hum, não entendi muito bem ainda, mas já que você está falando vou usar somente composição! Não, aí é que entra o erro. A herança é sim útil, mas somente caso faça sentido o relacionamento É-UM. Meu exemplo pode ser citado como um mal exemplo por que da mesma forma como ele serve para ilustrar uma desvantagem no uso de herança ele pode ser exatamente a solução. Tudo depende do seu projeto e é por isso que vou listar quais benefícios e desvantagens de cada um deles:</p>
<p><strong>Benefícios da herança:</strong></p>
<ul>
<li>Reusa tudo o que é comum nas classes relacionadas e isola o que for diferente.</li>
<li>A herança é vista diretamente no código</li>
<li>Desenvolvimento mais rápido em comparação com composição caso os problemas da herança não sejam um problema para sua aplicação.</li>
</ul>
<p><strong>Problemas da herança:</strong></p>
<ul>
<li>O encapsulamento entre classes e subclasses é fraco (o acoplamento é forte). Ou seja, mudar da superclasse pode afetar todas as subclasses além de violar um dos princípios da OO que é manter um fraco acoplamento.</li>
<li>Às vezes um objeto precisa ser de uma classe diferente em momentos diferentes e com herança isso não é possível. Imagine que usamos herança no caso do DispositivoC. Mas puts, agora faz mais sentido que ele se comporte como DispositivosPaiTipoC. Como alterar isso se estamos parafusados já com a herança? Vamos ter que quebrar todos os clientes e refatorar tudo.</li>
<li>Relacionamento estático.</li>
</ul>
<p><strong>Benefícios da composição:</strong></p>
<ul>
<li>O comportamento pode ser escolhido em tempo de execução em vez de estar amarrado em tempo de compilação.</li>
<li>Melhorarmos nossa abstração trabalhando com interfaces.</li>
<li>Detalhes internos dos objetos instanciados não são visíveis.</li>
<li>Respeitamos o princípio da responsabilidade única, uma vez que uma determinada ação é responsabilidade da classe pai e não necessariamente preciso impor essa responsabilidade em suas classes derivadas.</li>
<li>Respeito ao princípio da substituição de Liskov, uma vez que é muito fácil eu quebrar esse princípio com um override que seja mais forte que o método padrão da classe pai.</li>
</ul>
<p><strong>Problemas da composição:</strong></p>
<ul>
<li>Não diria que o software fica mais complexo, mas você deverá estar mais atento ao design da sua aplicação e isso irá requerer um melhor planejamento das classes que terão dependências de outras classes e etc.</li>
<li>Caso não seja o caso necessário, terá complexidade desnecessária a aplicação e isso acarretará a maior prazo de entrega do mesmo se for o caso.</li>
</ul>
<p>Resumindo se o objeto "é um tipo especial de" e não "um papel assumido por, se o objeto nunca tem que mudar para outra classe futuramente e/o a subclasse estende a superclasse mas não faz override ou anulação de variáveis e/ou métodos, use herança, do contrário, fuga desse problema!</p>
<p>Qualquer feedback, sugestão, erros (e isso é bem possível), críticas ou qualquer coisa do tipo, deixe seu comentário ou manda um e-mail!</p>
<p><strong>Referências e fontes de estudo</strong>:</p>
<p>http://blog.berniesumption.com/software/inheritance-is-evil-and-must-be-destroyed/</p>
<p>http://www.dsc.ufcg.edu.br/~jacques/cursos/map/html/pat/herancavscomposicao.htm</p>
<p>http://blog.caelum.com.br/como-nao-aprender-orientacao-a-objetos-heranca/</p>
<p>http://imasters.com.br/artigo/20380/java/heranca-x-composicao/</p>
<p>https://en.wikipedia.org/wiki/Design_Patterns</p>
<p>http://groselhas.maurogeorge.com.br/prefira-composicao-ao-inves-de-heranca-um-simples-exemplo-em-ruby.html#sthash.IXxGlACd.dpbs</p>
<p>http://marcionorberto.blogspot.com.br/2013/04/heranca-e-delegacao.html</p>
<p>http://www.devmedia.com.br/heranca-versus-composicao-qual-utilizar/26145</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Diferença entre API e Web Service de maneira simples</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000//diferenca-entre-api-e-web-service-de-maneira-simples.html" />
  <id>http://localhost:3000//diferenca-entre-api-e-web-service-de-maneira-simples</id>
  <published>2015-05-31T00:00:24Z</published>
  <updated>2015-05-31T00:00:24Z</updated>
  <content type="html"><![CDATA[ <p>Confesso que essa era uma pergunta que me intrigava. Eu via o conceito dos dois, conversas sobre os dois, mas ainda não tinha entendido qual a diferença entre eles e quando se referenciar a um ou a outro.</p>
<p><!--more--></p>
<p>Pois bem, basicamente é o seguinte:</p>
<p><strong>API (Application Programming Interface)</strong> - É como uma interface entre dois programas diferentes de modo que eles possam se comunicar um com o outro. Ou seja, uma API é a forma que terceiros disponibilizam uma interface de modo que possamos consumir um determinado serviço deles sem nos preocuparmos com a implementação do mesmo. As API podem usar qualquer meio de comunicação para iniciar a interação entre as aplicações. Por exemplo, as chamadas de sistema (System Calls) são invocados usando interrupções da API do kernel Linux.</p>
<p><strong>Web Services</strong> -  é uma interface projetada para se comunicar via rede. É uma API que usa obrigatoriamente a rede. Tipicamente, HTTP é o protocolo mais comumente usado para a comunicação. Web Services também usam SOAP, REST e XML-RPC como meio de comunicação. Ou seja, quando uma API precisa enviar dados através de rede, estamos falando de Web Services.</p>
<p>Só que é preciso estar atento a alguns detalhes. Uma API geralmente envolve chamar funções de dentro de um programa. Por exemplo, as aplicações de desktop, como planilhas e documentos de texto usam VBA e APIs baseados em COM que não envolvem a Web e mesmo aplicações de servidor como o Joomla podem usar uma API PHP presente no próprio servidor sem necessidade da rede.</p>
<p>Ou seja, resumindo de maneira bem simples:</p>
<ul>
<li>Todos os Web Services são API. Mas nem todas as API são Web Service.</li>
<li>Web Services podem não executar todas as tarefas que uma API normalmente realiza (ou pode realizar).</li>
<li>Um serviço Web utiliza apenas três estilos de comunicação: SOAP, REST e XML-RPC enquanto que a API pode usar qualquer estilo de comunicação.</li>
<li>Um Web Service sempre precisa de uma rede para o seu funcionamento enquanto uma API não precisa.</li>
<li>Uma API facilita a interface direta com um aplicativo enquanto que um Web Service é uma aplicação.</li>
</ul>
<p><strong>Referências</strong>:</p>
<ul>
<li><a href="http://pt.wikipedia.org/wiki/Web_service">Wikipedia</a></li>
<li><a href="http://www.differencebetween.net/technology/internet/difference-between-api-and-web-service/">Difference Between</a></li>
<li><a href="http://pt.stackoverflow.com/questions/17501/qual-%C3%A9-a-diferen%C3%A7a-de-api-biblioteca-e-framework">StackOverflow</a></li>
</ul>
 ]]></content>
</entry>


  <entry>
  <title type="text">A Full and Comprehensive Style Test (HTML)</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000//post1.html" />
  <id>http://localhost:3000//post1</id>
  <published>2013-06-05T00:00:00Z</published>
  <updated>2013-06-05T00:00:00Z</updated>
  <content type="html"><![CDATA[ <blockquote>
  <p>This is Markdown Cheatsheet Demo for <strong>Sustain</strong>, this Jekyll theme. Please check the raw content of this file for the markdown usage.</p>
</blockquote>

<p>This is just an <em>ipsis verbis</em> copy of the first example running on the <a href="http://demo.ghost.io">Ghost Demo</a>. This shows how you can use html styling to achieve your hopes.</p>

<p>Below is just about everything you’ll need to style in the theme. Check the source code to see the many embedded elements within paragraphs.</p>

<hr />

<h1 id="heading1">Heading 1</h1>

<h2 id="heading2">Heading 2</h2>

<h3 id="heading3">Heading 3</h3>

<h4 id="heading4">Heading 4</h4>

<h5 id="heading5">Heading 5</h5>

<h6 id="heading6">Heading 6</h6>

<hr />

<p>Lorem ipsum dolor sit amet, <a title="test link" href="#">test link</a> adipiscing elit. <strong>This is strong.</strong> Nullam dignissim convallis est. Quisque aliquam. <em>This is emphasized.</em> Donec faucibus. Nunc iaculis suscipit dui. 5<sup>3</sup> = 125. Water is H<sub>2</sub>O. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl. <cite>The New York Times</cite> (That’s a citation). <span style="text-decoration:underline;">Underline.</span> Maecenas ornare tortor. Donec sed tellus eget sapien fringilla nonummy. Mauris a ante. Suspendisse quam sem, consequat at, commodo vitae, feugiat in, nunc. Morbi imperdiet augue quis tellus.</p>

<p><abbr title="Hyper Text Markup Language">HTML</abbr> and <abbr title="Cascading Style Sheets">CSS</abbr> are our tools. Mauris a ante. Suspendisse quam sem, consequat at, commodo vitae, feugiat in, nunc. Morbi imperdiet augue quis tellus.  Praesent mattis, massa quis luctus fermentum, turpis mi volutpat justo, eu volutpat enim diam eget metus. To copy a file type <code>COPY <var>filename</var></code>. <del>Dinner’s at 5:00.</del> <ins>Let’s make that 7.</ins> This <span style="text-decoration:line-through;">text</span> has been struck.</p>

<hr />

<h2 id="media">Media</h2>

<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore.</p>

<h3 id="bigimage">Big Image</h3>

<p><img src="http://demo.ghost.io/content/images/2014/09/testimg1.jpeg" alt="Test Image" /></p>

<p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</p>

<h3 id="smallimage">Small Image</h3>

<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore.</p>

<p><img src="http://demo.ghost.io/content/images/2014/09/testimg2.jpg" alt="Small Test Image" /></p>

<p>Labore et dolore.</p>

<hr />

<h2 id="listtypes">List Types</h2>

<h3 id="definitionlist">Definition List</h3>

<dl>  
<dt>Definition List Title</dt>  
<dd>This is a definition list division.</dd>  
<dt>Definition</dt>  
<dd>An exact statement or description of the nature, scope, or meaning of something: <em>our definition of what constitutes poetry.</em></dd>  
</dl>

<h3 id="orderedlist">Ordered List</h3>

<ol>
<li>List Item 1  </li>
<li>List Item 2 <br />
<ol><li>Nested list item A</li>
<li>Nested list item B</li></ol></li>
<li>List Item 3</li>
</ol>

<h3 id="unorderedlist">Unordered List</h3>

<ul>
<li>List Item 1</li>
<li>List Item 2
<ul><li>Nested list item A</li>
<li>Nested list item B</li></ul></li>
<li>List Item 3</li>
</ul>

<hr />

<h2 id="table">Table</h2>

<table>  
<tbody>  
<tr>  
<th>Table Header 1</th>  
<th>Table Header 2</th>  
<th>Table Header 3</th>  
</tr>  
<tr>  
<td>Division 1</td>  
<td>Division 2</td>  
<td>Division 3</td>  
</tr>  
<tr class="even">  
<td>Division 1</td>  
<td>Division 2</td>  
<td>Division 3</td>  
</tr>  
<tr>  
<td>Division 1</td>  
<td>Division 2</td>  
<td>Division 3</td>  
</tr>  
</tbody>  
</table>

<hr />

<h2 id="preformattedtext">Preformatted Text</h2>

<p>Typographically, preformatted text is not the same thing as code. Sometimes, a faithful execution of the text requires preformatted text that may not have anything to do with code. Most browsers use Courier and that’s a good default — with one slight adjustment, Courier 10 Pitch over regular Courier for Linux users.</p>

<h3 id="code">Code</h3>

<p>Code can be presented inline, like <code>&lt;?php bloginfo('stylesheet_url'); ?&gt;</code>, or within a <code>&lt;pre&gt;</code> block. Because we have more specific typographic needs for code, we’ll specify Consolas and Monaco ahead of the browser-defined monospace font.</p>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><span class="nf">#container</span> <span class="p">{</span>
    <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
    <span class="k">margin</span><span class="o">:</span> <span class="m">0</span> <span class="m">-240px</span> <span class="m">0</span> <span class="m">0</span><span class="p">;</span>
    <span class="k">width</span><span class="o">:</span> <span class="m">100%</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<hr />

<h2 id="blockquotes">Blockquotes</h2>

<p>Let’s keep it simple. Italics are good to help set it off from the body text. Be sure to style the citation.</p>

<blockquote>
  <p>Good afternoon, gentlemen. I am a HAL 9000 computer. I became operational at the H.A.L. plant in Urbana, Illinois on the 12th of January 1992. My instructor was Mr. Langley, and he taught me to sing a song. If you’d like to hear it I can sing it for you. <cite>— <a href="http://en.wikipedia.org/wiki/HAL_9000">HAL 9000</a></cite></p>
</blockquote>

<p>And here’s a bit of trailing text.</p>

<hr />

<h2 id="textlevelsemantics">Text-level semantics</h2>

<p>The <a href="#">a element</a> example <br />
The <abbr>abbr element</abbr> and <abbr title="Title text">abbr element with title</abbr> examples <br />
The <b>b element</b> example <br />
The <cite>cite element</cite> example <br />
The <code>code element</code> example <br />
The <del>del element</del> example <br />
The <dfn>dfn element</dfn> and <dfn title="Title text">dfn element with title</dfn> examples <br />
The <em>em element</em> example <br />
The <i>i element</i> example <br />
The <ins>ins element</ins> example <br />
The <kbd>kbd element</kbd> example <br />
The <mark>mark element</mark> example <br />
The <q>q element <q>inside</q> a q element</q> example <br />
The <s>s element</s> example <br />
The <samp>samp element</samp> example <br />
The <small>small element</small> example <br />
The <span>span element</span> example <br />
The <strong>strong element</strong> example <br />
The <sub>sub element</sub> example <br />
The <sup>sup element</sup> example <br />
The <var>var element</var> example <br />
The <u>u element</u> example</p>

<hr />

<h2 id="forms">Forms</h2>

<form>  
<fieldset>  
<legend>Inputs as descendents of labels (form legend)</legend>  
<label>  
<b>Text input</b>  
<input type="text" value="default value" />  
</label>  
<label>  
<b>Email input</b>  
<input type="email" />  
</label>  
<label>  
<b>Search input</b>  
<input type="search" />  
</label>  
<label>  
<b>Tel input</b>  
<input type="tel" />  
</label>  
<label>  
<b>URL input</b>  
<input type="url" placeholder="http://" />  
</label>  
<label>  
<b>Password input</b>  
<input type="password" value="password" />  
</label>  
<label>  
<b>File input</b>  
<input type="file" />  
</label>  
<label>  
<b>Radio input</b>  
<input type="radio" name="rad" />  
</label>  
<label>  
<b>Checkbox input</b>  
<input type="checkbox" />  
</label>  
<label>  
<input type="radio" name="rad" /> Radio input  
</label>  
<label>  
<input type="checkbox" /> Checkbox input  
</label>  
<label>  
<b>Select field</b>  
<select>  
<option>Option 01</option>  
<option>Option 02</option>  
</select>  
</label>  
<label>  
<b>Textarea</b>  
<textarea cols="30" rows="5">Textarea text</textarea>  
</label>  
</fieldset> 

<fieldset>  
<legend>Clickable inputs and buttons</legend>  
<input type="image" src="http://placekitten.com/90/24" alt="Image (input)" />  
<input type="reset" value="Reset (input)" />  
<input type="button" value="Button (input)" />  
<input type="submit" value="Submit (input)" />  
<button type="reset">Reset (button)</button>  
<button type="button">Button (button)</button>  
<button type="submit">Submit (button)</button>  
</fieldset> 

<fieldset id="boxsize">  
<legend>box-sizing tests</legend>  
<div><input type="text" value="text" /></div>  
<div><input type="email" value="email" /></div>  
<div><input type="search" value="search" /></div>  
<div><input type="url" value="http://example.com" /></div>  
<div><input type="password" value="password" /></div> 

<div><input type="color" value="#000000" /></div>  
<div><input type="number" value="5" /></div>  
<div><input type="range" value="10" /></div>  
<div><input type="date" value="1970-01-01" /></div>  
<div><input type="month" value="1970-01" /></div>  
<div><input type="week" value="1970-W01" /></div>  
<div><input type="time" value="18:23" /></div>  
<div><input type="datetime" value="1970-01-01T00:00:00Z" /></div>  
<div><input type="datetime-local" value="1970-01-01T00:00" /></div> 

<div><input type="radio" /></div>  
<div><input type="checkbox" /></div> 

<div><select><option>Option 01</option><option>Option 02</option></select></div>  
<div><textarea cols="30" rows="5">Textarea text</textarea></div> 

<div><input type="image" src="http://placekitten.com/90/24" alt="Image (input)" /></div>  
<div><input type="reset" value="Reset (input)" /></div>  
<div><input type="button" value="Button (input)" /></div>  
<div><input type="submit" value="Submit (input)" /></div> 

<div><button type="reset">Reset (button)</button></div>  
<div><button type="button">Button (button)</button></div>  
<div><button type="submit">Submit (button)</button></div>  
</fieldset>  
</form>

<hr />

<h2 id="embeds">Embeds</h2>

<p>Sometimes all you want to do is embed a little love from another location and set your post alive.</p>

<h3 id="video">Video</h3>

<p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>

<iframe src="//player.vimeo.com/video/103224792?title=0&amp;byline=0&amp;portrait=0" width="600" height="338" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>

<p>Culpa qui officia deserunt mollit anim id est laborum.</p>

<h3 id="slides">Slides</h3>

<p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>

<script async="" class="speakerdeck-embed" data-id="34d2856027ce01316b5d621ab8e7d421" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<p>Culpa qui officia deserunt mollit anim id est laborum.</p>

<h3 id="audio">Audio</h3>

<p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>

<iframe width="100%" height="450" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/169381837&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>

<p>Culpa qui officia deserunt mollit anim id est laborum.</p>

<h3 id="code">Code</h3>

<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt.</p>

<p><div data-height="268" data-theme-id="0" data-slug-hash="bcqhe" data-default-tab="js" data-user="rglazebrook" class="codepen">&lt;/p&gt;

<pre><code>var c = new Sketch.create({autoclear: false}),
    bigCircle = 50,
    littleCircle = 5,
    // The velocity value determines how much to move the spinner head (in radians).
    velocity = 0.105,
    hue = 0,
    // The alpha value below determines the length of the spinner&#39;s tail.
    bg = &#39;rgba(40,40,40,.075)&#39;;
    Spinner = function() {};

Spinner.prototype.setup = function() {
  this.x = c.width / 2;
  this.y = c.height / 2 - bigCircle;
  this.rotation = 0;
}
Spinner.prototype.update = function() {
  this.rotation += velocity;
  this.rotation = this.rotation % TWO_PI;
  this.x = c.width /2 + cos(this.rotation) * bigCircle;
  this.y = c.height / 2 + sin(this.rotation) * bigCircle;
}
Spinner.prototype.draw = function() {
  c.fillStyle = &#39;hsl(&#39;+hue+&#39;,50%,50%)&#39;;
  c.beginPath();
  c.arc(this.x, this.y, littleCircle, 0, TWO_PI);
  c.fill();
  c.closePath(); 
}
c.setup = function() {
  spinner = new Spinner();
  spinner.setup();
} 
c.update = function() {
  spinner.update();
  hue = ++hue % 360;
}
c.draw = function() {
  spinner.draw();
  c.fillStyle = bg;
  c.fillRect(0,0,c.width,c.height);
}
</code></pre>  

<p>See the Pen <a href="http://codepen.io/rglazebrook/pen/bcqhe/">Simple Rotating Spinner</a> by Rob Glazebrook (<a href="http://codepen.io/rglazebrook">@rglazebrook</a>) on <a href="http://codepen.io">CodePen</a>.</p>  

<p>&lt;/div&gt;<script async="" src="//codepen.io/assets/embed/ei.js"></script></p>

<p>Isn't it beautiful.</p>
</div></p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Another markdown full cheatsheet demo (Markdown)</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000//post2.html" />
  <id>http://localhost:3000//post2</id>
  <published>2013-05-27T00:00:00Z</published>
  <updated>2013-05-27T00:00:00Z</updated>
  <content type="html"><![CDATA[ <blockquote>
  <p>This is Markdown Cheatsheet Demo for <strong>Sustain</strong>, this Jekyll theme. Please check the raw content of this file for the markdown usage.</p>
</blockquote>

<h2 id="typography-elements-in-one">Typography Elements in One</h2>

<p>Let’s start with a informative paragraph. <strong>This text is bolded.</strong> But not this one! <em>How about italic text?</em> Cool right? Ok, let’s <strong><em>combine</em></strong> them together. Yeah, that’s right! I have code to highlight, so <code>ThisIsMyCode()</code>. What a nice! Good people will hyperlink away, so <a href="#">here we go</a> or <a href="http://www.example.com">http://www.example.com</a>.</p>

<div class="divider"></div>

<h2 id="headings-h1-to-h6">Headings H1 to H6</h2>

<h1 id="h1-heading">H1 Heading</h1>

<h2 id="h2-heading">H2 Heading</h2>

<h3 id="h3-heading">H3 Heading</h3>

<h4 id="h4-heading">H4 Heading</h4>

<h5 id="h5-heading">H5 Heading</h5>

<h6 id="h6-heading">H6 Heading</h6>

<div class="divider"></div>

<h2 id="footnote">Footnote</h2>

<p>Let’s say you have text that you want to refer with a footnote, you can do that too! This is an example for the footnote number one <sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>. You can even add more footnotes, with link! <sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup></p>

<div class="divider"></div>

<h2 id="blockquote">Blockquote</h2>

<blockquote>
  <p>Start by doing what’s necessary; then do what’s possible; and suddenly you are doing the impossible. –Francis of Assisi</p>
</blockquote>

<p><strong>NOTE:</strong> This theme does NOT support nested blockquotes.</p>

<div class="divider"></div>

<h2 id="list-items">List Items</h2>

<ol>
  <li>First order list item</li>
  <li>Second item</li>
</ol>

<ul>
  <li>Unordered list can use asterisks</li>
  <li>Or minuses</li>
  <li>Or pluses</li>
</ul>

<div class="divider"></div>

<h2 id="code-blocks">Code Blocks</h2>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="s2">&quot;JavaScript syntax highlighting&quot;</span><span class="p">;</span>
<span class="nx">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">sys</span>  
<span class="n">s</span> <span class="o">=</span> <span class="s">&quot;Python syntax highlighting&quot;</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>  
<span class="k">def</span> <span class="nf">run_some_function</span><span class="p">():</span>
    <span class="s">&quot;Docs...&quot;</span>
    <span class="k">return</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><span class="c">/* css synthax highlighting */</span> 
<span class="nf">#container</span> <span class="p">{</span>
    <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
    <span class="k">margin</span><span class="o">:</span> <span class="m">0</span> <span class="m">-240px</span> <span class="m">0</span> <span class="m">0</span><span class="p">;</span>
    <span class="k">width</span><span class="o">:</span> <span class="m">100%</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<pre><code>No language indicated, so no syntax highlighting.
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre>

<div class="divider"></div>

<h2 id="table">Table</h2>

<h3 id="table-1-with-alignment">Table 1: With Alignment</h3>

<table>
  <thead>
    <tr>
      <th>Tables</th>
      <th style="text-align: center">Are</th>
      <th style="text-align: right">Cool</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>col 3 is</td>
      <td style="text-align: center">right-aligned</td>
      <td style="text-align: right">$1600</td>
    </tr>
    <tr>
      <td>col 2 is</td>
      <td style="text-align: center">centered</td>
      <td style="text-align: right">$12</td>
    </tr>
    <tr>
      <td>zebra stripes</td>
      <td style="text-align: center">are neat</td>
      <td style="text-align: right">$1</td>
    </tr>
  </tbody>
</table>

<h3 id="table-2-with-typography-elements">Table 2: With Typography Elements</h3>

<table>
  <thead>
    <tr>
      <th>Markdown</th>
      <th>Less</th>
      <th>Pretty</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><em>Still</em></td>
      <td><code>renders</code></td>
      <td><strong>nicely</strong></td>
    </tr>
    <tr>
      <td>1</td>
      <td>2</td>
      <td>3</td>
    </tr>
  </tbody>
</table>

<div class="divider"></div>

<h2 id="horizontal-line">Horizontal Line</h2>

<p>The HTML <code>&lt;hr&gt;</code> element is for creating a “thematic break” between paragraph-level elements. In markdown, you can create a <code>&lt;hr&gt;</code> with any of the following:</p>

<ul>
  <li><code>___</code>: three consecutive underscores</li>
  <li><code>---</code>: three consecutive dashes</li>
  <li><code>***</code>: three consecutive asterisks</li>
</ul>

<p>renders to:</p>

<hr />

<hr />

<hr />

<div class="divider"></div>

<h2 id="media">Media</h2>

<h3 id="youtube-embedded-iframe">YouTube Embedded Iframe</h3>

<iframe width="420" height="315" src="https://www.youtube.com/embed/nN6QuNqmAwk" frameborder="0" allowfullscreen=""></iframe>

<h3 id="image">Image</h3>

<p><img src="https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcSn8cwf82ee9tfml4Wx-tsM5AUavJ_DRHIiXXE4RejRp0RF2L7f6g" alt="Nature" /></p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>Footnote number one yeah baby! <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>A footnote you can link to - <a href="#">click here!</a> <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
 ]]></content>
</entry>


  <entry>
  <title type="text">Now seriously something real</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000//post5.html" />
  <id>http://localhost:3000//post5</id>
  <published>2013-02-10T00:00:00Z</published>
  <updated>2013-02-10T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>As I engage in the so-called “bull sessions” around and about the school, I too often find that most college men have a misconception of the purpose of education. Most of the “brethren” think that education should equip them with the proper instruments of exploitation so that they can forever trample over the masses. Still others think that education should furnish them with noble ends rather than means to an end.</p>

<p>It seems to me that education has a two-fold function to perform in the life of man and in society: the one is utility and the other is culture. Education must enable a man to become more efficient, to achieve with increasing facility the ligitimate goals of his life.</p>

<p>Education must also train one for quick, resolute and effective thinking. To think incisively and to think for one’s self is very difficult. We are prone to let our mental life become invaded by legions of half truths, prejudices, and propaganda. At this point, I often wonder whether or not education is fulfilling its purpose. A great majority of the so-called educated people do not think logically and scientifically. Even the press, the classroom, the platform, and the pulpit in many instances do not give us objective and unbiased truths. To save man from the morass of propaganda, in my opinion, is one of the chief aims of education. Education must enable one to sift and weigh evidence, to discern the true from the false, the real from the unreal, and the facts from the fiction.</p>

<p>The function of education, therefore, is to teach one to think intensively and to think critically. But education which stops with efficiency may prove the greatest menace to society. The most dangerous criminal may be the man gifted with reason, but with no morals.</p>

<p>The late Eugene Talmadge, in my opinion, possessed one of the better minds of Georgia, or even America. Moreover, he wore the Phi Beta Kappa key. By all measuring rods, Mr. Talmadge could think critically and intensively; yet he contends that I am an inferior being. Are those the types of men we call educated?</p>

<p>We must remember that intelligence is not enough. Intelligence plus character–that is the goal of true education. The complete education gives one not only power of concentration, but worthy objectives upon which to concentrate. The broad education will, therefore, transmit to one not only the accumulated knowledge of the race but also the accumulated experience of social living.</p>

<p>If we are not careful, our colleges will produce a group of close-minded, unscientific, illogical propagandists, consumed with immoral acts. Be careful, “brethren!” Be careful, teachers!</p>

<p>By Martin Luther King</p>

<p>An American pastor, activist, humanitarian. People know him for leading the African-American Civil Rights movement using nonviolent civil disobedience.</p>
 ]]></content>
</entry>



</feed>
